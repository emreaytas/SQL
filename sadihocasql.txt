###...SADİ HOCA SQL...###############################################################################################################################################################
Sql ile veritabanlarını yöneteceğiz...

////...mysql ile sql komutlarına giriş...////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

phpmyadmin ile çalışacağız.
..select komutu sorgulamak için kullanılır. sorgu olarak yollaruz meseka select 4 * 5 dedik ve go dedik o zaman bize 20 cevabını verir. komut veririz ve sonuç verir. komut veririz ve bir sonuç döndürmeye çalışır. select'ten sonra gelecek olan komuta göre işlem yaparız.
select 4 * 5 as veli; dersek eğer o zaman bana sonucu veli isminde getir deriz. select ali as veli dersek ali'yi bize veli sutununda getirecek..

veritabanları birden fazla sunucularda bulunabilir.

as isimlendirme için kullanılır aslında. select 4 * 5 as veli demek veli adı altında sonucu getir demek. 

tarih eklenirken nokta tire slaş gibi şeylerle ayrılması lazım... 2020/10/19   2020.10.19  2020-10-19 gibi...

eğer bilgi kalırsa null alır.

select kolonisimleri(...) where a = b(a ve b kolon ismi) order by a,b; bu yapı ile kolon isimleri aynı olanları alırız ve istediğimiz gibi sıralarız............   SELECT araba.marka,araba.model FROM emre.araba WHERE marka = model ORDER by marka,model;

order by ile kolonları istediğimiz sıra ile sıralarız.

where kosulunda and ve or kullanılanilir koşullar arasında bağlantı kurulabilir. 

now(); şimdiki zamanı return eder select ile sonucu alabiliriz.

isim varchar olarak kullanırsak eğer dinamik olarak kullanabiliriz.

eğer varchar olursa dinamik olur bu yüzden eğer her seferinde bir değer belii uzunlukta gelecekse varchar(11) gibi tanımlayabiliriz. ama sürekli değişecekse o zaman dinamik karakter dizisi(text) olabilir... varchar(10) olursa her sütün için o kadar karakter yer ayırır...

date zaman gün ay yıl datetime ise saat bilgiside tutar.

as kolon başlığıdır. select 4 * 5 as veli dersek sonucu bize veli kolonunda getirir.

mesela bir tablo olsun 3 tane kolonu olsun insert ile biz sadece iki tane eklersek birini boş bırakırsak mesela null olur değer eklemediğimiz eğer not null olarak belirlersek o zaman hata verir.

select version(); dersek eğer bu fonkisiyon çalışır ve değerini return ederiz
select now(); dersek bu fonkisyonun değerini sorgulamış oluruz.
pi(); fonkisiyonu ise pi sayısını return eder;
select'ten sonra gelecek olan cümle istenene sorgudur.
show databases; dersek eğer veritabanlarını görürüz. bu komutu veritabanlarını görmek istediğimiz sunucuya yollamamız lazım. bu sunucular local sunucular olabilir, web sunucusu olabilir.

bir veritabanı birden fazla sunucuya gönderilebilir.

veritabanı oluşturmak için create database ve ismi; komutu veririz.
bir veritabanı kullanılsın verilen komutlar onun için çalışsın istersek eğer o zaman use dbismi; ile istenen veri tabanını kullanırız.

mesela biz bir tablo oluşturduk ve isim uzunluğunu 20 belirledik. tüm satırlarda bu isim sutunun boyutu 20 olur. eğer her seferinde girilen veri uzunluğu aynı ise mesela tc numarası falan o zaman static olarak belirlemek daha iyidir. ama isim soyisim gibi değişkenler varsa o zmaan varchar kullanmak daha mantıklıdır.

create table if not exists tabloismi(veriler...sutun yapıları); yapısı ile biz tablo oluştururz.

CREATE TABLE `emre`.`tdci` (`isim` VARCHAR(20) NOT NULL , `soyisim` VARCHAR(20) NOT NULL , `tckimlik` VARCHAR(11) NOT NULL , `dogumtarihi` DATE NOT NULL ) ENGINE = InnoDB;
    ...burada örnek olarak yazabileceğimiz bir tablo. 
 
create table tdci if not exists(isim varchar(20) not null, soyisim varchar(20) not null, tckimlik varchar(20) not null, dogumtarihi date not null)ENGINE = InnoDB; 


describe tdci yaparsak eğer istenen tablonun yapısını sorgulayabiliriz.
describe istenenveritabanı.istenentablo; aslında ypı bu olmalı describe emre.tdci; // böylece istenen veritabanının tablosunu görebiliriz.

eğer bir tabloya veri eklemek isterseke insert into tablo (değişkenler sırası ile bunu girmezsek default olarak soldan sağa kabul edecek.) values(sırası ile veriler.)  
   INSERT INTO `tdci` (`isim`, `soyisim`, `tckimlik`, `dogumtarihi`) VALUES ('ali', 'veli', '344344434', '12.11.2001')
   instert into emre.tdci(isim,soyisim,tckimlik,dogumtarihi) values('emre','aytas','40708612266','19-11-1111'); bunu verirsek eğer o zmaan bir kişi daha eklenir bu tabloya.

istersek elaman eklemeyi sırası ile değil istenen sıraya görede yapabiliriz. insert into db.table(soyisim,isim,tckimlik,dogumtarihi) values('aytas','emre','42342342','23-23-2333'); şeklinde olabilir. ama default olsa idi o zaman sutunların sırasına göre girmek gerekirdi...


instert into db.table values(değerler); yaparsak eğer o zaman default olarak sırası ile ekleme yapar. 
sql'de tarih olarak anlaması için '12-23-2000' şeklinde tırnaklar içinde ve tire ile ayırarak yazmak lazım.



eğer sırası ile veri girmem gerekirken boş alan bırakırsak eğer değer almayanlar null olacak eğer null değerler alacak.


select * dersek eğer her şeyi seç demek from ile ise 
SELECT * FROM emre.tdci WHERE soyisim; böyle yaparsak eğer emre.tdci'dan soyisimlerin hepsini getir dedik. 


eğer sadece istenen satırı seçmek istersek o zaman select * from db.table where isim = "ali"; ismi ali olan tüm satırları getirir.
eğer sadce belli sutunları istersek o zaman select isim,soyisim from db.table where date = '12-12-2000'; yaparsak eğer o zaman sadece istenen tarihte olanların isim ve soysimleri gelir.

eğer select isim(eğer * yaparsak tüm satırı getirir çünkü tüm verileri getirir böylece tüm satır gelmiş olur.) from db.table where name = "emre" or surname =  "aytas"; böylece hem ismi emre hem soyadı aytas hemde hem ismi hemde soyadı aytas olanları getirecek ama sadece isimlerini getirecek.

where isim = "emre" and soyisim = "aytas" yaparsak eğer o zmaan sadece ismi ve soyismi emre aytaş olanlar üzerinde işlem yapacak.

mesela soyisimlere göre sıralamak istersek select * from db.table order by soyisim; yaparsak önce null sonra a, b , c ascii'ye göre sıralama olur.

select * from db.table; yaparsak eğer o zaman tüm verileri satır satır getirecek.
select kolonisimleri from db.table where istenen koşul;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///...delete ve update işlemleri.../////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

update ile biz güncelleme delete ile ise silme komutu vereceğiz. update 
eğer ir güncelleme yapacaksak bir satırda mesela o zaman diğerlerinden farklı olan özelliklerine göre işlem yapacağız.

UPDATE emre.tdci set soyisim = 'ddd' WHERE tckimlik = '40708612266';
   // önce update emre.tdci ile güncelleme yapılacak yer set soysisim = 'dddd' ile yapılacak değişiklik where tckimlik ile ise nerede yapılacak bu güncelleme belirleriz.

delete from emre.tdci(tablo) where isim = 'BMW'(koşul) komple bu tablodan bu satır silinecek.     

delete from db.table; yaparsak eğer her şeyi siler.

update db.table set isim = "bmw"; yaparsak eğer her ismi bmw yapar. çünkü bir koşul belirlemedik.

koşula göre bir tablodan veri silmek istersek eğer o zaman 

UPDATE emre.araba set marka = "emre"; // where eklemezsek hepsini kabul eder ve hepsinin markası emre olur...
 

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////...tablolarda yapısal değişiklik.(alter)...database ve tablo düşümü (drop)////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

alter TABLE emre.tdci add column telefon varchar(20); // alter table dersek eğer tabloda isim yapacağımızı belli ederiz sonra tablo ismini gireriz db.table şeklinde sonra ise yapılacak işlemi gireriz. add column dersek eğer o zmaan yeni bir kolon ekle demek add column telefon varchar(20) diyerek ise eklenecek olan tablonun ismi ve yapısını belirtiriz. 

bir database'yi drop etmek istersek eğer drop database ismi;
bir tabloyu drop etmek istersek o zaman drop table db.table(veya direkt sadece tablo ismi ama karışıklık olabilir.);

mesela bir kolunu düşürmek istersek o zzmaan alter table (çünkü tabloda bir değişim olacak.) db.tablo drop column(kolon düşür) kolonismi;
   alter table emre.tdci drop column telefon; böylece kişilerdeki telefon bilgisi gider.

drop database veya table dersek eğer bilgiler kaybolur buna dikkat etmek gerekir.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

alter table emre.araba drop primary key; // bunu dersek eğer tüm primary keyler silinecek. veriler kaybolmayacak ancak o andan itibaren o sütün primary key özelliği taşımayacak...

alter table emre.araba add primary key marka dedik mesela ama önceden eklenmiş verileride iki tane aynı marka var(sadece markaya primary key eklediğimizi varsayarsak eğer.) hata verir. 

//...Birincil anahtar (primary key)...//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

her tabloda sadece bir tane primary key bulunabilir.

primary key NULL olamaz ama bazı veritabanları NULL'ı değer olarak kabul ederek sadece bir tane olmasına izin verir.

primary key aslında bir koşuldur...
mesela bir tabloda primary key olan bir alan var ve biz onun primary key olmasını istemiyoruz artık o zaman alter table drop primary key
eğer bir tabloda bir sutunu primary key yapmak istersek eğer o zaman alter table emre.calisan add primary key istenensutun tckno; gibi bir yapı ile primary key eklemesi yapabiliriz.

eğer bir tablodaki bütün primary keyleri iptal etmek istersek primary keyleri drop etmek istersek o zaman... alter table db.table drop primary key; yaparız.

bir sutun primary key olursa eğer her satır için farklı değer alacak mesela tckimlik numarası.

ALTER table emre.calisan add PRIMARY key tckno; // bu şekilde de istenen bir sutunu primary key yapabiliriz.
eğer tüm sutunlar primary key olsun istersek eğer. alter table emre.calisan add primary key yaparız.

alter table db.table add primary key; yaparsak eğer tüm sutunlar primary key olur. tüm koşulları kabul edeceek çünkü alter table db.table add primary key kolonadi; yaparsak istenen kolona virgül ile ayırırsak istenen kolonlara primary key eklemiş oluruz.

primary keyler null olamaz. bazı databaseler null olarak sadece bir tane kabul eder. birden fazla null kabul etmez çünkü her değer farklı olmalı.

foreign key InnoDB ENGINE ile çalışıyor.

iki tane tablo yapalım calisan ve departman. bir çalışan tek bir deprartmanda çalışabilir. bir departmanda birden fazla çalışan olabilir.

alter table db.table drop primary key; yaparsak tüm primary keyler düşer tek bir kolon veya kolonlar belirtirsek eğer o zaman istenenlerinki drop edecek.

mesela elimizde iki tane tcsi olan bir tablo var ve biz tckno'yu primary key yapmak istiyoruz o zmaan hata verecek. bunun sebebi ise bellidir. primary key olan sutun sadece bir tane değer alabilir.

eğer bir tablo oluştururken biz bir sutunun primary key olmasını istersek o zaman tckimlik varchar(11) primary key; gibi bir şekilde tanımlayabiliriz.
   veya birden fazla sutunu primary key yapmak istersek eğer o zaman primary key(sutun isimleri gibi yapabiliriz.)

primary keyleri tek tek veya istersek eğer birden fazlasını tek bir satırda primary key(kolonadlari diyerek belirtebiliriz.).

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////...join kurulması...////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


motorlardan mylSam foreign key kullanımı sunmuyor bunun için engine olarak InnoDB kullanmamız lazım. mylSam eski bir motor çünkü.
   bu motorlar verilerin çekimini yazımını vs yapar. diskte nasıl saklanacağını vs belirler.

unique ile primary farkı nedir = unique bir kolonun kendi içinde unique olmasını sağlar yani kolon unique ise eğer o kolon için birden fazla veri tekrarı olamaz. ama primary key bununla birlikte Birincil anhatar olarak sağlanıyor, üzerinde index kurup ordan tabloyu tarayacağı için ona öncelik veriyor.
      mesela iki kolon unique olursa eğer her kolon kendi içinde tekrarlatmama yapacak. ama primary key olursa eğer iki kolon iki verininde aynı olmadığı koşulunu sağlatacak. mesela isim ve soyisim olsun eğer ikiside unique olursa hem isimler tekrarlanmaz hemde soyisimler ama primary key olursa ikiside isim ve soyisimin aynı anda aynı yapmama kuralını uygular.
      yani iki kolonda unique olursa emre aytas ve emre aysol olmaz.  ikiside primary olursa eğer bu durum olabilir.
      unique olunca sadece bir tane isim bir tane soyismi olabilir satırlarda ama primary key olursa birden fazla isim birden fazla soyisim olabilir ama kombinasyonları aynı olamaz.

primary key tabloyu Birincil olarak tamamlayan yapıdır.

....
use emre;

CREATE TABLE IF NOT EXISTS calisan(
   id INT PRIMARY KEY,
   ismi varchar(20),
   maas INT(11), 
   dept INT(11)
)ENGINE = INNODB;

CREATE TABLE IF not EXISTS  departman(
  id INT(11) PRIMARY KEY,
  ismi varchar(20),
  butce INT(11),
  yonetici INT(11)
    
)ENGINE = INNODB;

INSERT INTO emre.calisan VALUES('15','ali','5000','1');
INSERT INTO emre.calisan VALUES('16','veli','5500','2');

INSERT INTO emre.departman VALUES('1','muhasebe','100000','15');
INSERT INTO emre.departman VALUES('2','bilisim','100000','16'); 
   ...// biz burada iki tane tablo oluşturduk. 
eğer bu tablolarda select * from calisan, departman where calisan.dept = departman.id; // yani ne demek olur calisanların yanına calisanin içindeki departman numarasının departmanı gelir.


mesela select * from tablo1,tablo2 dedik. o zaman satır satır önce tablo1'in ilk satırını yanına tablo2'nin ilk satırını getirir. tabloların satırları yan yana olarak satır satır yazılır.  where kosulu ile ilişki kurmazsak eğer tüm kombinasyonlar gelir.


mesela select tablo1,tablo2 where tablo1.deptid = tablo2.id; böylece karşılıklı olarak birbirine id olarak uyanlar gelir. where kullanmazsak eğer o zaman tüm kombinasyonlar gelir.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///...foreign key ve 3 tablo join edilmesi.../////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


foreign key için InnoDB motorunu kullanmak en mantıklısı olacak.

CREATE table if not EXISTS projeler(
    id INT, // buradaki int değeri projelerin int değeri olacak.
    isim varchar(20), 
    departman_id int, // buradaki departman_id kısmı departman tablosunun değerleri ile birleşecek...
    FOREIGN KEY(departman_id) // ikincil anahtar olacak olan değerleri sçeeriz.
        REFERENCES departman(id) // bu değerin hangisi ile bağlanacağını referans ile belirtiriz.
        on DELETE CASCADE // eğer departman silinirse projede silinecek. 
        ON UPDATE CASCADE
    
)ENGINE = INNODB;

eğer foreign keyli bir tablo oluşturursak eğer referans alacağı tablonun önceden üretilmiş olması lazım. sonuçta bir yere bağlanacak.
bir projeye olmayan bir departman ekleneme. bunun nedeni foreign key olmayan bir değere bağlanamaz referans olması için o değerin olması lazım.

mesela elimizde 3 tane tablo var t1,t2,t3 eğer select * from t1,t2,t3; yaparsak tabloların değerlerinin 3lü kombinasyonlarını getirir t1,t2,t3 sırası ile. kartezyen çarpım yani kombinasyonları getirir. t1 3 değer t2 4 değer t3 5 değer olsaydı 3*4*5 tane kombinasyon olacaktı.

foreign key olacak değerler referans verecek olan değerin aynı tip olması lazım.

select * from calisan,departman,projeler where calisan.dept = departman.id and departman.id = projeler.departman_id; calisanin departmanı departmanın id'sine eşit olacak ve projenin departman id'si departman'ın id'sine eşit olacak. 

... eğer bir tabloya bir veriyi ikincil anhatar olarak göndereceksek o zaman gönderilenin belirleyici değeri mesela id primary olmalıdır(veya) unique. ve mesela bir tablonun belirleyici değerini ikinci anahtar yapacağız bunu alan tablodaki alanda o anahtarın tipinde olmalı int ise int olarak onu karşılamalı.

foreign key bağladığınız tablodaki primary keylerden birisi olmalıdır. eğer olmayan bir primary key değeri yollarsak hata alırız.

foreign key olacak değerleri alan bir tabloya ihtiyacımız var diğer foreign key veren tablodan gelen değerin tipinde olmalıdır. mesela birden fazla primary key olan tablo var foreign key veren tabloda o zaman alacak tablodada o değerleri taşıyacak kolonlar olması lazım...

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

eğer tek bir kolon primary key olacaksa o zaman onun yanına primary key koyabiliriz. ama eğer birden fazla kolon aynı anda primary key olacaksa o zaman önce kolonları tanımlamak sonra primary key(kolonlar) yapmamız lazım tek satır halinde.
CREATE table if not EXISTS motor(
   id int , 
   motorno varchar(10),
   hacim varchar(4),
   PRIMARY key(id,motorno) // birden fazla kolon primary key olacağı için tek bir satır halinde koyduk.

)ENGINE = INNODB;


////Outer Join Kurulması.Left ve Right Outer Join////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

outer join NULL olma durumunda ortaya çıkar.

iki üzerinde join kurulurken left ve right Outer join nasıl kurulur bundan bahsedeceğiz.

mesela bir tabloya birden fazla satırı aynı anda eklemek istersek
  INSERT INTO `calisan` (`id`, `isim`, `maas`, `dept`) VALUES ('17', 'ahmet', '8989', '1'), ('18', 'mehmet', '4324', '1'); bu yapıyı kullanabiliriz.
  insert into db.table(eklenecek değerler sırası ile eğer bu parantez olmazsa default olan halinin sırasına göre değerleri atayacak.) values(ilksatırındeğerleri),(ikincisatırındeğerleri),(ucuncusatirindeğerleri);

mesela select * from calisan where calisan.dept = departman.id; // bu inner join ikisinin aynı olma durumu outer join ise null olma durumda ortaya çıkar.

......örnek olarak iki tane tablomuz olsun calisan ve departman.
use emre;

CREATE TABLE IF NOT EXISTS calisan(
   id INT PRIMARY KEY,
   ismi varchar(20),
   maas INT(11), 
   dept INT(11)
)ENGINE = INNODB;

CREATE TABLE IF not EXISTS  departman(
  id INT(11) PRIMARY KEY,
  ismi varchar(20),
  butce INT(11),
  yonetici INT(11)
    
)ENGINE = INNODB;

iki tane tablomuzu oluşturduk. select * from calisan,departman where calisan.dept = departman.id; calisan ve departmanı yan yana yazılacak satır satır ama dept'i null olan veya tabloda olmayan bir departman numarasına sahip olan calisanlar gelmeyecek sorgu ile.
  bunun önüne geçmek için outer join kullanmak lazım. 

select aslında tümünü getir gibi bir mantıkla çalışır iki tane tablo select * from ettiğimiz zaman tüm değerler kombinasyonları ile gelir bunun nedeni tüm değerleri getirebilmek içindir.

select * from calisan,departman where calisan.dept = departman.id; yaparsak eğer bu inner join olur ama null(veya eşitliği sağlamayan herhangi bir çalışanı olmayan departöan veya herhangi bir departmanda olmayan çalışan) olan bir calisan.dept veya departman.id uygun değilse outer join o zaman devreye giriyor.
     calisan ve departmanı bağladığımız için ikiisnden birisinde null olan olunca(burada departmanın çalışanı yoksa veya calisan herhangi bir departmanda değilse ) onlar gelmeyecek bunun önüne geçmek için = outer join kullanacağız. 
     select * from calisan left join departman on calisan.dept = departman.id; böyle olunca departmanı olmayan çalışanlar geldi.
     select * from departman left join calisan on calisan.dept = departman.id; böyle olunca çalışanı olmayan departmanlar geldi.

     full outer join için ise yani null olanlarıda getir dersek eğer.  
     (select * from calisan left join departman on calisan.dept = departman.id) union (select * from departman left join calisan on calisan.dept = departman.id); //


union ile tablolardan daha doğrusu sorgulardan gelen değerleri birleştiririz ama her satır değeri bir kere gelir çünkü önümüze gelen değerler set yani her eleman tek olacak şekilde geliyor. böylece full outer join kurabiliriz. 

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

birden fazla satırı tek seferde atayabiliriz. instert into emre.araba values((araba1 değerler),(araba2 değerler),(araba3 değerler),(araba4 değerler));

##################################################################################################################################################################


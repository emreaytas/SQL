####...SQL...##############################################################################################################################################################3

eğer bir sql sayfasında işlem yapacaksak bunu bir programlama dili gibi satır satır okunduğunu bilmek lazım ve o sql sorgusu çalışıtığında işlemler o içerideklere göre olur.
    mesela elimizde testdb ve sakila adlı iki tane database var ve seçili olan testdb biz eğer sql sorgusunda use sakila; der ve tablo oluşturursak eğer o zaman sakila üzerinde tablo oluşturma olur.    

mysql workbench ile tablolar oluşturup işlemler yapacağız. bu phpmyadminden farklı bir web sunucusuna ihtiyacı yok. 

///...Create database... veritabanı oluşturmak.../////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

eğer sql komutları ile çalışmak istersek o zaman \sql yaparak işlemlerin geri kalanında sql komutlarını kullanabiliriz.
mesela \py dersek python komutlarını kullandıracağız. \js yaparsak mesela o zaman javascript komutları ile işlem yapabileceğiz. 

bağlantı gerçekleştirmek için mysql shell ile \connect kullaniciadi@localiselocalhost değilse farklı bir host \connect root@localhost bunu dedik ve şifreyi girdik sonra...  MySQL  localhost:33060+ ssl ÇIKTI... biz \connect ile bir porta bağlanırken ; kullanmayız. komutlar için ; kullanırız... daha doğrusu \ ile kullanılan komutlar için ; kullanmayız. geri kalan komutlar için ; kullanırız...

show databases; dersek tüm veritabanlarını görebiliriz. içinde bulundupumuz port içerisinde...
  sql shell'de her komuttan sonra ; kullanmamız lazım...
veritabanları arasında geçiş yapabilmek için use veritabanıadi yapısı kullanmamız lazım. use sakila; gibi...
   eğer içinde olduğumuz veritabanının tablolarını görmek istersek o zaman show tables; deriz.

eğer veirtabanı değiştirmek istersek içinde bulunduğumuz database içinde önce show databases; der sonra use istenenveritabanı; ile istediğimiz veritabanını kullanabiliriz.

eğer bir veritabanı oluşturmak istersek o zaman create database ismi; yaparsak o zaman biz istediğimiz isimde bir veritabanı oluştururuz. ve show databases; diyerek o zaman elde var olan veritabanlarını görebiliriz.
   ancak bir veritabanı oluştururken karakter setine dikkat etmezsek o zaman türkçe karakter kullanırken sorunlarla karşılaşabiliriz.  
   create database aynisimdebidb o zaman böyle bir veritabanı var der.
   drop ile biz tablo ve veritabanı kaldırabiliriz, silebiliriz. drop database emre; diyerek biz bir veritabanını silebiliriz. mesela drop database emre; eğer böyle bir veritabanı yoksa işlem olmaz ve bunu belirtir.

karakter set belirterek bir veirtabanı oluşturmak istersek o zaman create database dbismi character set utf8 collate utf8_general_ci ... diyerek bu db türkçe karakterleride alabilir... 

workbecnhte drop ve create database komutları ile istenen işlemleri yapabiliriz arayüz ile.,

aynı isimde database kullanmak istersek eğer bize bir uyarı verecek bi işlemi yaptırmayacak...

character set utf8 diyerek biz karater seti collate utf8_general_ci diyerek ise lehçe belirtiriz.

workbenchte yıldırım işareti ile komutu uygulattırırız...



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///Create table... tablo oluşturmak.../////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

workbecnhte use olarak belirtilen veritabanı koyu renkli olarak gösterilir. eğer biz bir veritabanı ğzeirnde illem yapmak istersek o zaman onun use olarak seçili olduğundan emin olmak lazım.
  use olarak kullanmak için üzerine çift tıklama veya use dbname; yağabiliriz.

eğer tablo oluşturmak istersek o zaman CREATE TABLE IF NOT EXISTS GOREVLER; burada CREATE TABLE İLE tablo oluştur deriz ve IF NOT EXISTS ile ise eğer yoksa böyle bir tablo oluştur deriz. eğer varsa uyarı verir. GOREVLER ise eğer tablonun ismi olacak.

    CREATE TABLE IF NOT EXISTS GOREVLER(
        GOREV_NO INT AUTO_INCREMENT PRIMARY KEY, // GÖREVNO ile biz bir sutunun adini belirleriz INT ile hangi yapıda veri alacağını belirtiriz. AUTO_INCREMENT ile ise otomatik değer alan bir alan olsun isteriz. PRIMARY KEY diyerek ise  aynı GOREV_NO olan birden fazla satir olmasin diye...
        GOREV_ADI VARCHAR(255) NOT NULL, // burada ise önce sutun ismi sonra ise VARCHAR diyerek bir karakter dizisi olduğunu 255 adet maximum karakter alacağını NOT NULL ile ise NULL olmayacağını belirtiriz.
        BASLANGIC_TARIHI DATE, // DATE türünden bir veri yükleyeceğiz BASLANGIC_TARIHI kısmında...
        BITIS_TARIHI DATE,
        DURUM TINYINT NOT NULL, // TINYINT demek byte gibi bir şey. az alan kaplayan int türü...
        ONCELIK TINYINT NOT NULL,
        ACIKLAMA TEXT, //  bir text olacak...
        KAYIT_TARIHI TIMESTAMP DEFAULT CURRENT_TIMESTAMP // sistemin zamanını alacak...
    )ENGINE INNODB;

tablo oluştururken bizim dikkat etmemiz gereken nokta şudur = her sutun , ile ayrılır en sondaki sutundan sonra , koyulmaz çünkü bir ayırmaya gerek yok...

workbecnhte tablonun özelliklerini Tables sağtık Table inspector ve Columns kısmında tablodaki sutunların özelliklerini görebiliriz...
    ama bunu sql sorgusu ile yapabiliriz... = DESCRIBE GOREVLER; // böylece biz GOREVLER tablosundaki alanların özelliklerini vs görebiliriz.

describe tablename ile bu tablodaki verilerin vs özelliklerini görebiliriz...
  // tanımla tabloadi kısaca.

...mesela biz belli alanlara bazı kısıtlar koymamız gerekebilir. örneğin görevlerle ilişkili bir tablo oluşturup elimizdeki tabloda primary olan key'i yabancı key olarak tanımlamamız gerekebilir. veya bir tabloda bir veri güncelleniyor veya siliniyorsa o tablo ile ilintili olan verilerin ona göre değişmesini istiyorsak kısıt koymamız gerekir. bu işlemlere kısıt koymak denir.
   elimizde bir tablo var ve bu tablo ile ilişkili başka bir tablo daha var ana tablodaki veriyi kısıtlı veri olarak oluşturusak eğer herhangi bir tabloda o veri üzerinde olan değişim silinme vs tüm o kısıtlı veriiyi kullanan tablolarda güncellenir.
   



.................. kısıt koyma başka tablolarda birbiriile ilintili tablolarda olan verilere kısıt koyma.

   use testdb;

CREATE TABLE IF NOT EXISTS KONTROL_LISTESI(
     YAPILACAK_GOREV INT AUTO_INCREMENT,
     GOREV_NO INT,
     ACIKLAMA VARCHAR(255) NOT NULL,
     TAMAMLANDI BOOLEAN NOT NULL DEFAULT FALSE,
     PRIMARY KEY(YAPILACAK_GOREV, GOREV_NO),
     FOREIGN KEY(GOREV_NO),
          REFERENCES GOREVLER(GOREV_NO) //burada biz referansıon nerden geleceğini ve hangilerinin geleceğini belirtiriz.
          ON UPDATE RESTRICT // bu da bir kısıttır. RESTRICT bu tabloda GOREV_NO'nun değiştirilemeyecek bir veri olduğunu belirtiyor...
          ON DELETE CASCADE // bu da bir ksıttır. eğer referans olan GOREVLER tablosundan gelen bir GOREV_NO silinirse KONTROL_LISTESI'deki GOREV_NO'ları silecek.


)ENGINE INNODB; // bu olmadan direkt olarak ); kullanarakta tabloyu belirtebilirdik.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///PRIMARY KEY... birincil anahtar kullanımı.../////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

birincil anahtar tablodaki her satırı benzersiz şekilde tanımlayan sutun veya sutun grubuna verilen addır.
birincil anahtar sutunun null değerleri olamaz.her tabloda bir tane primary key sutun veya sutun grubu olmalı.
birincil anahatar birden çok sutundan oluşuyor ise kombinasyonu benzersiz olmalıdır.  
birincil anahatar benzersiz değerler içermelidir. eğer bir tabloda birden fazla birincil anahatar sutunu var ise birbiri ile kombinasyonu benzersiz olmalıdır. mesela iki tane veri var ve primary key olamıyor o zaman ikisinin kombinasyonlarından primary key oluşturabiliriz.
    
......... örnek tablolar oluşturduk. mesela bir kullanici birden fazla rolleri olabilsin,bir rol birden fazla kullanciya verilebilsin...

     use testdb;
create table if not exists kullanicilar(

 kullanici_no INT AUTO_INCREMENT PRIMARY KEY, //  PRIMARY KEY tanımlaması yaptık.
 kullanici_adi VARCHAR(40),
 parola varchar(20),
 eposta varchar(40)
 
);

create table if not exists roller(
   rol_no INT AUTO_INCREMENT,
   rol_adi varchar(50),
   PRIMARY KEY(rol_no) 
 
);

create table if not exists kullanici_roller( // kullanici tablosundan kullanici roller tablosundan ise rolleri alacak.

   rol_no INT, 
   kullanici_no INT,
   PRIMARY KEY(rol_no, kullanici_no), // burada iki veriyi kullanarak biz primary key olan bir sutun ürettik.
   FOREIGN KEY(rol_no) // burada biz foreign key olacak verinin nereden geleceğini belirtiyoruz. references ile.
      references roller(rol_no),
   foreign key(kullanici_no)
      references kullanicilar(kullanici_no)


);
// rol_no'su primary key olarak belirlenemez. çünkü bir rol numarası birden fazla kullanıcıya verilebilecek. kullanici numarasıda primary key olamaz çünkü bir kullaniciya birden fazla rol tanımlanabilecek... ama eğer kullanici_no ve rol_no kullanarak ürettiğimiz kombinasyon primary key olacak.

// mesela primary key her zaman tablo olurken verilmek durumunda değil unutmuş olabiliriz veya gerek görmemiş olabiliriz... ne yapacağız silip baştan mı yapacağız? = 
... örnek bir tablo oluşturalım. primary key koymayı unuttuğumuz veya gerek göremdiğimiz bir tablo olsun.

   use testdb;
   create table if not exists pkdemo(
    numara INT,
    tanim varchar(255) not null
  );  
  //  bit tablonun birincil anahtarı var mı yok mu iki yolla görebiliriz = birincisi tablonun table inspector kısmında index kısmında keyler gözükebilir...
      diğer bir yolu ise describe pkdemo; yaparsak eğer bilgileri görürürz.

// içine primary koymayı unuttuğmmuuz veya gerek görmediğimiz tabloya primary key eklemek istersek o zaman = alter table pkdemo add primary key(numara); deriz.  
    alter table dbname bir değişim olacak ismini belirttiğimiz tabloda demek.  add demek ekle demek. add primary key dersek eğer o zaman numara sutununa birincil anahtar özelliği eklenmiş demektir.


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////...FOREIGN KEY. ikincil anahtar kullanimi...////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

mesela elimizde iki tane tablo var birisinin içindeki veri diğerinden referans ile gelecek o zaman ikisninde aynı isimde olmasına gerek yok çünkü referans ile birbirine bağlanacak bu yapılar. farklı adlarda olsalarda referans ile bağlandıkları için aynı değerleri taşıyacaklar.

 // biz burada ikincil anahatar olacak yapının nereden geleceğini belirttik.
 constraint fk_kategori
    foreign key(kategoriNumarasi)
        references kategoriler(kategori_no) 


create database fkdemo;
use fkdemo;

create table if not exists kategoriler(
kategori_no INT auto_increment primary key,
kategori_adi varchar(100) not null
);

create table if not exists urunler(

urun_no int auto_increment primary key,
urun_adi varchar(100) not null,
kategoriNumarasi INT, 
constraint fk_kategori
    foreign key(kategoriNumarasi)
        references kategoriler(kategori_no) 

); // burada bir db oluşturduk ve sonra use diyerek onun üzerinde işlem yapacağımızı belirttik. sonra tablolar oluşturup hangi değerlerin birbiri ile birleşeceğini belirteceğiz.


      INSERT INTO kategoriler(kategori_adi)
          values('akilli telefon')
          // burada insert diyerek eleman ekleyeceğimizi belirtiriz.
  
          // select * from kategoriler;  değerleri ekledikten sonra 1 akilli telefon 2 akilli saat oldu nedeni ise kategori_no auto_increment olduğu için gelen verileri göre sırası ile artacak...        


instert into tabloadi(tablodaki sutun)
     values ve ('') içinde değerler ile biz verileri ekleriz istenen tablonun istenen sutununa...
    values (''),(''),(''); değerleri yazabiliriz. 


select * from fkdemo.kategoriler; // eğer böyle olursa istenen veritabanının istenen tablosu üzerinde çekme işlemi yapılır.

eğer birbiri ile ilişkili verileri eklersek eğer olmayan bir anahtara veri vermeye kalkarsak eğer hata alırız.

update fkdemo.kategoriler set kategori_no = 100 where kategori_no = 1; // burada ise önce hangi veritabanın hangi tablosunda işlem yapacağız belirtiriz. set ile yeni veriyi belirleriz. where ile hangisinin güncelleneceğini belirtiriz.
   değişecek verinin yabancı anhatar olarak kullanılmaması lazım. yabancı anahatarın tanımlı oludğu tabloya biz o anahtarın sahip olmadığı bir değeri koyamayız. 

eğer bir tabloyu drop etmek istersek drop table db.table yani drop table fkdemo.urunler; yapmamız lazım.

.................................

create table if not exists urunler(

urun_no int auto_increment primary key,
urun_adi varchar(100) not null,
kategoriNumarasi INT, 
constraint fk_kategori
    foreign key(kategoriNumarasi)
        references kategoriler(kategori_no) 
        on update cascade  // bunun anlamı ise eğer yabancı anahtarda bir değişim olmaya kalkarsa o zaman onunla bağlı olan tüm tablolarla o anahtarın değerini güncelle demektir...
        on delete cascade // bunu yaparsak eğer herhangi bir satır silinirse bağlı olan tablolarla karşılık geleni sil demek.
);  

.................................

select * from fkdemo.urunler; // burada kategori numarası bir ve iki olan ürünler var.

update fkdemo.kategoriler set kategori_no = 100 where kategori_no = 1; // biz update on cascade ve delete on cascade yaptığımız için hem kategori_no'su değişti kategoriler tablosundaki hemde urunlerde kategori_no'ları güncellendi. biribiri ile bağlı olanlar değiştiler.

select * from fkdemo.urunler; // burada kategori_no'su 1 olanlar yüz oldu biribiri ile bağlı olan veriler güncellendi. kategoriler'deki kategori_no'su 1 olan 100 oldu. ve urunlerde kategori_no'su 1 olanlar 100 oldu.

delete from fkdemo.kategoriler where kategori_no = 2; // buarada ise eğer on delete cascade kullanmasaydık eğer hata alırdık ama şimdi almadık. 
    // delete from db.table ile tabloyu where ile ise nereden silme olacağını seçeceğiz...
    // burada kategori numarası 2 olan numarayı yok ettiğimiz için urunlerde kategori_no'sunu referans alan kategoriNumarasi 2 olan ürünlerde silinecek. çünkü birbirleri ile ilişkileri var...

..................................




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


##################################################################################################################################################################3
